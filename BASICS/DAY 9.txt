POSITIVE ONLY

public static int getLongestSubarray(int []arr, long k1) {
        int len=0;
        int n=arr.length;
        for(int i=0;i<n;i++)
        {
            int sum=0;
            for(int j=i;j<n;j++)
            {
                sum=sum+arr[j];
                if(sum==k1)
                {
                    len=Math.max(len,j-i+1);
                }
            }
        }
        return len;
        
    }

POSITIVE AND NEGATIVE

 public static int getLongestSubarray(int []a, int k) {
        int n = a.length; 
        Map<Integer, Integer> Sum = new HashMap<>();
        int s = 0;
        int Len = 0;
        for (int i = 0; i < n; i++) {
            s =s+ a[i];
            if (s == k) {
                Len = Math.max(Len, i + 1);
            }
            int rem = s - k;
            if (Sum.containsKey(rem)) {
                int l = i - Sum.get(rem);
                Len = Math.max(Len, l);
            }
            if (!Sum.containsKey(s)) {
               Sum.put(s, i);
            }
        }
        return Len;
    }

Sort an array of 0s, 1s and 2s

class Solution {
    public void sortColors(int[] arr) {
        int low = 0, mid = 0, high = arr.length - 1;

        while (mid <= high) {
            if (arr[mid] == 0) {
                int temp = arr[low];
                arr[low] = arr[mid];
                arr[mid] = temp;
                low++;
                mid++;
            } else if (arr[mid] == 1) {
                mid++;
            } else {
                int temp = arr[mid];
                arr[mid] = arr[high];
                arr[high] = temp;
                high--;
            }
        }
    }
}

