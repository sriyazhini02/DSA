class Solution {
    public int reverse(int n) {
        int revNum = 0;
        while (n != 0) {
            int ld = n % 10;
            if (revNum > Integer.MAX_VALUE / 10 || (revNum == Integer.MAX_VALUE / 10 && ld > 7))
                return 0;
            if (revNum < Integer.MIN_VALUE / 10 || (revNum == Integer.MIN_VALUE / 10 && ld < -8))
                return 0;
            revNum = revNum * 10 + ld;
            n = n / 10;
        }
        return revNum;
    }
}

class Solution {
    public boolean isPalindrome(int n) {
        int org=n;
        int rev=0;
        while(n>0)
        {
            int last=n%10;
            n=n/10;
            rev=(rev*10)+last;
        }
        if(rev == org)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}

class Solution {
    public int missingNumber(int[] nums) {
        int n = nums.length;
        int total = n * (n + 1) / 2;
        int sum = 0;
        
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }

        return total - sum;
    }
}

