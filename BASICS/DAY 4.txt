class Solution {
    public void moveZeroes(int[] nums) {
        int n = nums.length;
        int j = -1;
        for(int i = 0; i < n; i++) {
            if(nums[i] == 0) {
                j = i;
                break;
            }
        }

        if(j == -1) return; 
        for(int i = j + 1; i < n; i++) {
            if(nums[i] != 0) {
                int temp = nums[i];
                nums[i] = nums[j];
                nums[j] = temp;
                j++;
            }
        }
    }
}


int Linearsearch(int arr[],int num)
{
    int n=arr.length;
    for(int i=0;i<n;i++)
    {
        if(arr[i]==num)
        return i;
    }
    return -1;
}

static ArrayList<Integer> FindUnion(int arr1[], int arr2[], int n, int m) {
    int i = 0, j = 0;
    ArrayList<Integer> Union = new ArrayList<>();
    
    while (i < n && j < m) {
        if (arr1[i] <= arr2[j]) {
            if (Union.size() == 0 || Union.get(Union.size() - 1) != arr1[i])
                Union.add(arr1[i]);
            i++;
        } else {
            if (Union.size() == 0 || Union.get(Union.size() - 1) != arr2[j])
                Union.add(arr2[j]);
            j++;
        }
    }
    
    while (i < n) {
        if (Union.get(Union.size() - 1) != arr1[i])
            Union.add(arr1[i]);
        i++;
    }
    
    while (j < m) {
        if (Union.get(Union.size() - 1) != arr2[j])
            Union.add(arr2[j]);
        j++;
    }
    
    return Union;
}


static ArrayList<Integer> FindIntersection(int arr1[], int arr2[], int n, int m) {
    int i = 0, j = 0;
    ArrayList<Integer> Intersection = new ArrayList<>();

    while (i < n && j < m) {
        if (arr1[i] == arr2[j]) {
            if (Intersection.size() == 0 || Intersection.get(Intersection.size() - 1) != arr1[i]) {
                Intersection.add(arr1[i]);
            }
            i++;
            j++;
        } else if (arr1[i] < arr2[j]) {
            i++;
        } else {
            j++;
        }
    }

    return Intersection;
}

