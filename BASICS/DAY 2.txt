import java.util.*;
class Solution {
    public int[] intersection(int[] nums1, int[] nums2) {
        Map<Integer,Integer> map=new HashMap<>();
        List <Integer> result=new ArrayList<>();
        for(int num:nums1)
        {
            map.put(num,1);
        }
        for(int num:nums2)
        {
            if(map.containsKey(num)&&map.get(num)==1)
            {
                result.add(num);
                map.put(num,0);
            }
        }
        int[] ans=new int[result.size()];
        for(int i=0;i<result.size();i++)
        {
            ans[i]=result.get(i);
        }
        return ans;
    }
}


import java.util.HashMap;

class Solution {
    public int[] twoSum(int[] nums, int target) {
        HashMap<Integer, Integer> map = new HashMap<>();
        
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            
            if (map.containsKey(complement)) {
                return new int[] { map.get(complement), i };
            }
            
            map.put(nums[i], i);
        }
        
        return new int[0]; 
    }
}

class Solution {
    public int firstUniqChar(String s) {
        HashMap<Character, Integer> map = new HashMap<>();
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            map.put(ch, map.getOrDefault(ch, 0) + 1);
        }
        for (int i = 0; i < s.length(); i++) {
            if (map.get(s.charAt(i)) == 1) {
                return i;
            }
        }
        return -1; 
    }
}

class Solution {
    public int fib(int n) {
            if(n <= 1){
                
                return n;
            }
            int last = fib(n-1);
            int slast = fib(n-2);
            
            return last + slast;
    }
}





